// <auto-generated />
using System;
using HelpDeskApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HelpDeskApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251022043602_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HelpDeskApi.Models.Asset", b =>
                {
                    b.Property<Guid>("AssetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssetID");

                    b.HasIndex("UserID");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetID = new Guid("33333333-3333-3333-3333-333333333331"),
                            AssetName = "San Ramon Residence",
                            AssetType = "Home",
                            Description = "Primary residence in San Ramon, CA",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            AssetID = new Guid("33333333-3333-3333-3333-333333333332"),
                            AssetName = "Danville Property",
                            AssetType = "Home",
                            Description = "Secondary property in Danville, CA",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            AssetID = new Guid("44444444-4444-4444-4444-444444444441"),
                            AssetName = "BMW M4",
                            AssetType = "Vehicle",
                            Description = "2024 BMW M4 Competition",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            AssetID = new Guid("44444444-4444-4444-4444-444444444442"),
                            AssetName = "Lexus IS 500",
                            AssetType = "Vehicle",
                            Description = "2024 Lexus IS 500 F Sport",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            AssetID = new Guid("44444444-4444-4444-4444-444444444443"),
                            AssetName = "2026 NINJA 650",
                            AssetType = "Vehicle",
                            Description = "Kawasaki Ninja 650 Motorcycle",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            AssetID = new Guid("55555555-5555-5555-5555-555555555551"),
                            AssetName = "Silver Will",
                            AssetType = "Personal Property",
                            Description = "Championship racehorse, valued at $2,000,000",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("HelpDeskApi.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID");

                    b.HasIndex("AssetID");

                    b.HasIndex("UserID");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketID = new Guid("66666666-6666-6666-6666-666666666661"),
                            AssetID = new Guid("33333333-3333-3333-3333-333333333331"),
                            CreatedDate = new DateTime(2025, 10, 16, 21, 36, 2, 96, DateTimeKind.Local).AddTicks(1249),
                            Description = "Annual HVAC maintenance required for San Ramon residence",
                            LastUpdatedDate = new DateTime(2025, 10, 16, 21, 36, 2, 96, DateTimeKind.Local).AddTicks(1253),
                            Priority = "Medium",
                            Status = "Open",
                            Title = "HVAC System Maintenance",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            TicketID = new Guid("66666666-6666-6666-6666-666666666662"),
                            AssetID = new Guid("44444444-4444-4444-4444-444444444441"),
                            CreatedDate = new DateTime(2025, 10, 19, 21, 36, 2, 96, DateTimeKind.Local).AddTicks(1258),
                            Description = "Scheduled oil change and brake inspection",
                            LastUpdatedDate = new DateTime(2025, 10, 20, 21, 36, 2, 96, DateTimeKind.Local).AddTicks(1259),
                            Priority = "High",
                            Status = "In Progress",
                            Title = "BMW M4 Oil Change",
                            UserID = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("HelpDeskApi.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "kory@jpf.com",
                            FullName = "Kory Zhang",
                            PasswordHash = "$2a$11$xRUJGHtE/L0abWvW4gPx2Og.wdHFQqEYIgeQdPjX63oGmB.lvRX/i",
                            Role = "Admin"
                        },
                        new
                        {
                            UserID = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "john@jpf.com",
                            FullName = "John Doe",
                            PasswordHash = "$2a$11$xRUJGHtE/L0abWvW4gPx2Og.wdHFQqEYIgeQdPjX63oGmB.lvRX/i",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("HelpDeskApi.Models.Asset", b =>
                {
                    b.HasOne("HelpDeskApi.Models.User", "User")
                        .WithMany("Assets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HelpDeskApi.Models.Ticket", b =>
                {
                    b.HasOne("HelpDeskApi.Models.Asset", "Asset")
                        .WithMany("Tickets")
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelpDeskApi.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HelpDeskApi.Models.Asset", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("HelpDeskApi.Models.User", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
